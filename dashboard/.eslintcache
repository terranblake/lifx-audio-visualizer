[{"/Users/tblake/Documents/earney/react_dashboard/src/index.js":"1","/Users/tblake/Documents/earney/react_dashboard/src/App.js":"2","/Users/tblake/Documents/earney/react_dashboard/src/reportWebVitals.js":"3","/Users/tblake/Documents/earney/react_dashboard/src/panels/homePagePanel.js":"4","/Users/tblake/Documents/earney/react_dashboard/src/panels/tickersDiscoveryPanel.js":"5","/Users/tblake/Documents/earney/react_dashboard/src/panels/historicalPricingPanel.js":"6","/Users/tblake/Documents/earney/react_dashboard/src/panels/historicalEarningsPanel.js":"7","/Users/tblake/Documents/earney/react_dashboard/src/panels/tickersSelectionPanel.js":"8","/Users/tblake/Documents/earney/react_dashboard/src/panels/eventDiscoveryPanel.js":"9","/Users/tblake/Documents/earney/react_dashboard/src/components/RangedDatePicker.js":"10","/Users/tblake/Documents/earney/react_dashboard/src/panels/optionsDiscoveryPanel.js":"11","/Users/tblake/Documents/earney/react_dashboard/src/components/MultipleSelect.js":"12","/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/index.js":"13","/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/reportWebVitals.js":"14","/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/App.js":"15","/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/panels/homePagePanel.js":"16","/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/panels/powerFrequencyPanel.js":"17","/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/utils/socketio.js":"18","/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/panels/snapshotWaveformPanel.js":"19","/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/panels/PowerFrequencyPanel.js":"20","/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/panels/SnapshotWaveformPanel.js":"21","/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/panels/WaveformStatisticsPanel.js":"22","/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/components/StaticTable/index.js":"23","/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/panels/HomePagePanel.js":"24"},{"size":500,"mtime":1608593991354,"results":"25","hashOfConfig":"26"},{"size":132,"mtime":1608593991355,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1608593991353,"results":"28","hashOfConfig":"26"},{"size":1457,"mtime":1608595602343,"results":"29","hashOfConfig":"26"},{"size":1864,"mtime":1608593991353,"results":"30","hashOfConfig":"26"},{"size":5827,"mtime":1608593991354,"results":"31","hashOfConfig":"26"},{"size":15892,"mtime":1608593991354,"results":"32","hashOfConfig":"26"},{"size":1336,"mtime":1608593991353,"results":"33","hashOfConfig":"26"},{"size":3698,"mtime":1608593991353,"results":"34","hashOfConfig":"26"},{"size":1925,"mtime":1608593991355,"results":"35","hashOfConfig":"26"},{"size":3917,"mtime":1608596360322,"results":"36","hashOfConfig":"26"},{"size":3168,"mtime":1608596332292,"results":"37","hashOfConfig":"26"},{"size":500,"mtime":1609255101376,"results":"38","hashOfConfig":"39"},{"size":362,"mtime":1609255101377,"results":"40","hashOfConfig":"39"},{"size":131,"mtime":1609354048553,"results":"41","hashOfConfig":"39"},{"size":1478,"mtime":1609353340689,"results":"42","hashOfConfig":"39"},{"size":4668,"mtime":1609353376269,"results":"43","hashOfConfig":"39"},{"size":261,"mtime":1609360865542,"results":"44","hashOfConfig":"39"},{"size":2176,"mtime":1609350809833,"results":"45","hashOfConfig":"39"},{"size":7661,"mtime":1609380904455,"results":"46","hashOfConfig":"39"},{"size":2176,"mtime":1609350809833,"results":"47","hashOfConfig":"39"},{"size":379,"mtime":1609375027587,"results":"48","hashOfConfig":"39"},{"size":1590,"mtime":1609352332015,"results":"49","hashOfConfig":"39"},{"size":1636,"mtime":1609379770925,"results":"50","hashOfConfig":"39"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"177nr1q",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"53"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"53"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"53"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"53"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"1omh3sr",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"82"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"82"},"/Users/tblake/Documents/earney/react_dashboard/src/index.js",[],["112","113"],"/Users/tblake/Documents/earney/react_dashboard/src/App.js",[],"/Users/tblake/Documents/earney/react_dashboard/src/reportWebVitals.js",[],"/Users/tblake/Documents/earney/react_dashboard/src/panels/homePagePanel.js",[],"/Users/tblake/Documents/earney/react_dashboard/src/panels/tickersDiscoveryPanel.js",["114","115"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { IconButton, Box, Divider, InputBase, TextField, Paper } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport { Search, Add } from '@material-ui/icons';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: 15,\n    padding: '2px 10px',\n    display: 'flex',\n    alignItems: 'center',\n    width: 600,\n  },\n  input: {\n    width: '100%',\n    marginLeft: theme.spacing(1),\n    // flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n  autoComplete: {\n    width: '75%'\n  },\n  divider: {\n    height: 28,\n    margin: 4,\n  },\n}));\n\nexport default function TickersDiscoveryPanel() {\n  const classes = useStyles();\n  const [filteredTickers, setFilteredTickers] = useState([]);\n\n  return (\n    <Box display=\"flex\" width=\"100%\" justifyContent=\"center\" m={1} p={1} bgcolor=\"background.paper\">\n      <Paper component=\"form\" className={classes.root}>\n        <Autocomplete\n          id=\"free-solo-demo\"\n          className={classes.autoComplete}\n          options={filteredTickers.map((option) => option.symbol)}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              className={classes.input}\n              placeholder=\"Find symbols\"\n              InputProps={{\n                ...params.InputProps,\n                type: 'search',\n                'aria-label': 'find symbols'\n              }}\n            />\n          )}\n        />\n        <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\n          <Search />\n        </IconButton>\n        <Divider className={classes.divider} orientation=\"vertical\" />\n        <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"add\">\n          <Add />\n        </IconButton>\n      </Paper>\n    </Box>\n  );\n}","/Users/tblake/Documents/earney/react_dashboard/src/panels/historicalPricingPanel.js",[],"/Users/tblake/Documents/earney/react_dashboard/src/panels/historicalEarningsPanel.js",["116","117","118","119","120","121"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport CloseIcon from '@material-ui/icons/Close';\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n    { id: 'symbol', numeric: false, disablePadding: true, label: 'Symbol' },\n    { id: 'date', numeric: false, disablePadding: false, label: 'Date' },\n    { id: 'revenuePerShare', numeric: true, disablePadding: true, label: 'revenuePerShare' },\n    { id: 'netIncomePerShare', numeric: true, disablePadding: true, label: 'netIncomePerShare' },\n    { id: 'cashPerShare', numeric: true, disablePadding: true, label: 'cashPerShare' },\n    { id: 'bookValuePerShare', numeric: true, disablePadding: true, label: 'bookValuePerShare' },\n];\n\nfunction EnhancedTableHead(props) {\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ 'aria-label': 'select all desserts' }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'default'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {\n                                        order === 'desc'\n                                            ? 'sorted descending'\n                                            : 'sorted ascending'\n                                    }\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === 'light'\n            ? {\n                color: theme.palette.secondary.main,\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n            }\n            : {\n                color: theme.palette.text.primary,\n                backgroundColor: theme.palette.secondary.dark,\n            },\n    title: {\n        flex: '1 1 100%',\n    },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const { numSelected } = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0,\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                    {numSelected} selected\n                </Typography>\n            ) : (\n                    <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                        {/* Nutrition */}\n                    </Typography>\n                )}\n\n            {numSelected > 0 ? (\n                <div>\n                    <Tooltip title=\"Delete\">\n                        <IconButton aria-label=\"delete\">\n                            <DeleteIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Close\">\n                        <IconButton aria-label=\"Close\">\n                            <CloseIcon />\n                        </IconButton>\n                    </Tooltip>\n                </div>\n            ) : (\n                    <Tooltip title=\"Filter list\">\n                        <IconButton aria-label=\"filter list\">\n                            <FilterListIcon />\n                        </IconButton>\n                    </Tooltip>\n                )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nconst ws = new WebSocket('ws://127.0.0.1:8001');\n\nexport default function HistoricalEarningsPanel() {\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('symbol');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(true);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const [rows, setRows] = React.useState([]);\n    const [columns, setColumns] = React.useState([]);\n    const [subscription, setSubscription] = React.useState({\n        command: 'earnings_comparison',\n        arguments: {\n            // get the last 3 of this document type\n            count: 3,\n            document_type: '10-q',\n            tickers: ['aapl', 'ddog', 'wmt'],\n            start: moment().subtract(1, 'week'),\n            end: moment()\n        }\n    });\n\n    const onOpen = (ws, event) => {\n        console.log('earnings socket opened', event);\n        ws.send(JSON.stringify(subscription))\n    }\n\n    const onMessage = (event) => {\n        console.log('earnings ', 'socket received message', event);\n        const data = JSON.parse(event.data);\n        const columns = data.length\n            ? Object.keys(data[0]).map(c => {\n                return {\n                    Header: c,\n                    accessor: c\n                };\n            })\n            : [];\n\n        setRows(data);\n        setColumns(columns);\n    }\n\n    const onClose = (event) => {\n        console.log('earnings ', 'socket closed', event);\n    }\n\n    ws.onopen = (e) => onOpen(ws, e);\n    ws.onclose = onClose;\n    ws.onmessage = onMessage;\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.symbol);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1),\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const handleChangeDense = (event) => {\n        setDense(event.target.checked);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n    const sortedRows = stableSort(rows, getComparator(order, orderBy))\n        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar numSelected={selected.length} />\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        size={dense ? 'small' : 'medium'}\n                        aria-label=\"enhanced table\"\n                    >\n                        <EnhancedTableHead\n                            classes={classes}\n                            numSelected={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAllClick={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                        />\n                        <TableBody>\n                            {\n                                sortedRows.map((row, index) => {\n                                    const isItemSelected = isSelected(row.symbol);\n\n                                    let isDuplicateTicker = false;\n                                    if (index > 0)\n                                        isDuplicateTicker = sortedRows[index - 1].symbol == row.symbol;\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                                    return (\n                                        <TableRow\n                                            hover\n                                            onClick={(event) => handleClick(event, row.symbol)}\n                                            role=\"checkbox\"\n                                            aria-checked={isItemSelected}\n                                            tabIndex={-1}\n                                            key={row.symbol}\n                                            selected={isItemSelected}\n                                            width='30%'\n                                        >\n                                            <TableCell padding=\"checkbox\">\n                                                {\n                                                    isDuplicateTicker\n                                                        ? <div></div>\n                                                        : <Checkbox\n                                                            checked={isItemSelected}\n                                                            inputProps={{ 'aria-labelledby': labelId }}\n                                                        />\n                                                }\n                                            </TableCell>\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                                                {\n                                                    isDuplicateTicker\n                                                        ? \"\"\n                                                        : row.symbol\n                                                }\n                                            </TableCell>\n                                            <TableCell style={{ whiteSpace: 'nowrap' }} align=\"right\">{row.date}</TableCell>\n                                            <TableCell align=\"right\">{row.revenuePerShare}</TableCell>\n                                            <TableCell align=\"right\">{row.netIncomePerShare}</TableCell>\n                                            <TableCell align=\"right\">{row.netIncomePerShare}</TableCell>\n                                            <TableCell align=\"right\">{row.cashPerShare}</TableCell>\n                                            <TableCell align=\"right\">{row.bookValuePerShare}</TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n            {/* <FormControlLabel\n                control={<Switch checked={dense} onChange={handleChangeDense} />}\n                label=\"Dense padding\"\n            /> */}\n        </div>\n    );\n}\n","/Users/tblake/Documents/earney/react_dashboard/src/panels/tickersSelectionPanel.js",["122"],"import React, { useState } from 'react';\nimport { Snackbar, Box } from '@material-ui/core';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\n\nexport default function TickersSelectionPanel() {\n  const [state, setState] = useState({\n    open: false,\n    vertical: 'bottom',\n    horizontal: 'right',\n  });\n  const [tickers, setTickers] = useState(['aapl', 'wmt', 'ddog']);\n  const [selectedTickers, setSelectedTickers] = useState(['aapl']);\n\n  const { vertical, horizontal, open } = state;\n\n  const handleClose = () => {\n    setState({ ...state, open: false });\n  };\n\n  // propogate selected state up higher?\n  const handleTickersChange = (e, selected) => {\n    setSelectedTickers(selected);\n  }\n\n  const buttons = (\n    <ToggleButtonGroup\n      size=\"small\"\n      aria-label=\"ticker selection\"\n      value={selectedTickers}\n      onChange={handleTickersChange}\n    >\n      {\n        tickers.map(t => <ToggleButton value={t}>{t}</ToggleButton>)\n      }\n    </ToggleButtonGroup>\n  );\n\n  return (\n    <Box display=\"flex\" width=\"100%\" justifyContent=\"center\" m={1} p={1} bgcolor=\"background.paper\">\n      {buttons}\n      <Snackbar\n        anchorOrigin={{ vertical, horizontal }}\n        open={open}\n        onClose={handleClose}\n        message=\"I love snacks\"\n        key={vertical + horizontal}\n      />\n    </Box>\n  );\n}","/Users/tblake/Documents/earney/react_dashboard/src/panels/eventDiscoveryPanel.js",["123"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionActions from '@material-ui/core/AccordionActions';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\n\nimport RangedDatePicker from '../components/RangedDatePicker';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: 'bottom',\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: 'center',\n  },\n  column: {\n    flexBasis: '33.33%',\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: theme.spacing(1, 2),\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  },\n}));\n\nexport default function EventDiscoveryPanel() {\n  const classes = useStyles();\n\n  const onSearch = (e) => {\n\n  }\n\n  return (\n    <Box display=\"flex\" width=\"100%\" justifyContent=\"center\" m={1} p={1} bgcolor=\"background.paper\" className={classes.root}>\n      <Accordion style={{ width: '100%' }}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1c-content\"\n          id=\"panel1c-header\"\n        >\n          <div className={classes.column}>\n            <Typography className={classes.heading}>Events</Typography>\n          </div>\n          <div className={classes.column}>\n            <Typography className={classes.secondaryHeading}>Select event type</Typography>\n          </div>\n          <div className={classes.column}>\n            <Typography className={classes.secondaryHeading}>Select date range</Typography>\n          </div>\n        </AccordionSummary>\n        <AccordionDetails className={classes.details}>\n          <Grid container xs={12}>\n            <Grid container item xs={12} lg={4}>\n              <div className={classes.column} />\n            </Grid>\n            <Grid container item xs={12} lg={4}>\n              <div className={classes.column}>\n                <Chip label=\"Earnings calls\" onDelete={() => { }} />\n                <Chip label=\"News\" onDelete={() => { }} />\n              </div>\n            </Grid>\n            <Grid container item xs={12} lg={4}>\n              <div className={classes.columns}>\n                <RangedDatePicker />\n                <Divider />\n                <AccordionActions>\n                  <Button size=\"small\">Cancel</Button>\n                  <Button size=\"small\" color=\"primary\" onClick={onSearch}>\n                    Search\n              </Button>\n                </AccordionActions>\n              </div>\n            </Grid>\n          </Grid>\n\n\n          {/* <div className={clsx(classes.column, classes.helper)}>\n            <Typography variant=\"caption\">\n              Select event type to filter\n              <br />\n              <a href=\"#secondary-heading-and-columns\" className={classes.link}>\n                Learn more\n              </a>\n            </Typography>\n          </div> */}\n        </AccordionDetails>\n      </Accordion>\n    </Box>\n  );\n}","/Users/tblake/Documents/earney/react_dashboard/src/components/RangedDatePicker.js",[],"/Users/tblake/Documents/earney/react_dashboard/src/panels/optionsDiscoveryPanel.js",["124","125","126","127"],"/Users/tblake/Documents/earney/react_dashboard/src/components/MultipleSelect.js",["128","129","130","131","132"],"/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/index.js",[],["133","134"],"/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/reportWebVitals.js",[],"/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/App.js",[],"/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/panels/homePagePanel.js",["135"],"/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/panels/powerFrequencyPanel.js",["136","137"],"/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/utils/socketio.js",[],["138","139"],"/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/panels/snapshotWaveformPanel.js",["140"],"/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/panels/PowerFrequencyPanel.js",["141"],"import React, { PureComponent } from \"react\";\nimport moment from \"moment\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ReferenceLine,\n  ReferenceArea,\n} from \"recharts\";\nimport { getSocket, ENDPOINT } from \"../utils/socketio\";\n\nconst CustomizedLabel = (props) => {\n  const { x, y, stroke, value } = props;\n  return (\n    <text x={x} y={y} dy={-4} fill={stroke} fontSize={10} textAnchor={\"middle\"}>\n      {value}\n    </text>\n  );\n};\n\n// replace the chart with this zoomable one from recharts\n// https://codesandbox.io/s/l4pq6x00xq?file=/src/Hello.js\n\nexport default class PowerFrequencyPanel extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: undefined,\n      refAreaLeft: undefined,\n      refAreaRight: undefined,\n      subscription: {\n        command: \"microphone\",\n        arguments: {\n          x: \"frequency\",\n          y: \"power\",\n        },\n      },\n      left: 0,\n      right: 12000,\n      top: 3,\n      bottom: -3,\n    };\n\n    this.zoom = this.zoom.bind(this);\n    this.zoomOut = this.zoomOut.bind(this);\n\n    this.onOpen = this.onOpen.bind(this);\n    this.onClose = this.onClose.bind(this);\n    this.onMessage = this.onMessage.bind(this);\n\n    this.getChartZones = this.getChartZones.bind(this);\n    this.getChartLines = this.getChartLines.bind(this);\n  }\n\n  componentDidMount() {\n    this.ws = getSocket(this.state.subscription.command);\n    this.ws.onopen = this.onOpen;\n    this.ws.onclose = this.onClose;\n    this.ws.onmessage = this.onMessage;\n  }\n\n  onOpen(event) {\n    console.debug(\"socket opened\", event);\n    this.ws.send(JSON.stringify(this.state.subscription));\n  }\n\n  onMessage(event) {\n    // console.debug('socket received message', event);\n    const data = JSON.parse(event.data);\n\n    // fixme: new state should be handled using actions, reducers, sagas, etc.\n\n    let formattedData = [];\n    const multiplier =\n      Math.pow(Math.max(...data.data.power), -1) * (this.state.top * 0.8);\n    for (let i = 0; i < data.data.frequency.length; i++) {\n      formattedData.push({\n        frequency: data.data.frequency[i],\n        power: data.data.power[i] * multiplier,\n      });\n    }\n\n    const streamReadAt = data.data.streamReadAt;\n    this.props.setWaveform({\n      ...(streamReadAt && { streamReadAt }),\n      data: formattedData,\n    });\n\n    this.setState({ data: formattedData.slice() });\n  }\n\n  onClose(event) {\n    console.debug(\"socket closed\", event);\n  }\n\n  getAxisYDomain(from, to, ref, offset) {\n    const refData = this.state.data.slice(from - 1, to);\n    if (!refData.length) return [this.state.bottom, this.state.top];\n\n    let [bottom, top] = [refData[0][ref], refData[0][ref]];\n    refData.forEach((d) => {\n      if (d[ref] > top) top = d[ref];\n      if (d[ref] < bottom) bottom = d[ref];\n    });\n\n    return [(bottom | 0) - offset, (top | 0) + offset];\n  }\n\n  getChartLines() {\n    return (\n      <Line\n        type=\"monotone\"\n        name=\"power\"\n        dot={false}\n        dataKey=\"power\"\n        key=\"power\"\n        label={<CustomizedLabel />}\n      />\n    );\n  }\n\n  getChartZones() {\n    return this.props.frequencyRanges.map((r) => (\n      <ReferenceArea\n        x1={r[0]}\n        x2={r[1]}\n        y1={-3}\n        y2={0}\n        key={r[0]}\n        stroke={r[3]}\n        strokeOpacity={0.1}\n      />\n    ));\n  }\n\n  getReferencesLines() {\n    return this.props.frequencyRanges.map((r) => {\n      return (\n        <ReferenceLine\n          x={r[1]}\n          key={r[2]}\n          label={{\n            value: r[2],\n            angle: -45,\n            position: \"middle\",\n            textAnchor: \"middle\",\n            fontSize: 10,\n            fill: \"rgba(0, 255, 0, 1.0)\",\n          }}\n          stroke=\"red\"\n          strokeDasharray=\"3 3\"\n          //   yAxisId={r[2]}\n        />\n      );\n    });\n  }\n\n  getXAxisTicks() {\n    const { left, right } = this.state;\n    const ticks = this.props.frequencyRanges.reduce(\n      (acc, curr) => {\n        if (curr[0] >= left && curr[0] <= right) acc.push(curr[0]);\n\n        if (curr[1] >= left && curr[1] <= right) acc.push(curr[1]);\n        return acc;\n      },\n      [this.state.right]\n    );\n    return ticks;\n  }\n\n  getYAxisTicks() {\n    return [this.state.bottom, this.state.top];\n  }\n\n  zoom() {\n    let { refAreaLeft, refAreaRight, data } = this.state;\n\n    if (!data || !data.length) {\n      console.log(\"missing data when zooming\");\n      return;\n    }\n\n    console.log(\"zooming\", { refAreaLeft, refAreaRight, data });\n\n    if (refAreaLeft === refAreaRight || refAreaRight === \"\") {\n      this.setState({\n        refAreaLeft: \"\",\n        refAreaRight: \"\",\n      });\n      return;\n    }\n\n    // xAxis domain\n    if (refAreaLeft > refAreaRight)\n      [refAreaLeft, refAreaRight] = [refAreaRight, refAreaLeft];\n\n    // yAxis domain\n    const [bottom, top] = this.getAxisYDomain(\n      refAreaLeft,\n      refAreaRight,\n      \"power\",\n      1\n    );\n\n    this.setState({\n      refAreaLeft: \"\",\n      refAreaRight: \"\",\n      data: data.slice(),\n      left: refAreaLeft,\n      right: refAreaRight,\n      bottom,\n      top,\n    });\n  }\n\n  zoomOut() {\n    const { data } = this.state;\n    console.debug(\"zooming out\");\n    this.setState({\n      data: data.slice(),\n      refAreaLeft: 0,\n      refAreaRight: 0,\n      left: 0,\n      right: 12000,\n      top: 1,\n      bottom: -1,\n    });\n  }\n\n  render() {\n    const {\n      left,\n      right,\n      top,\n      bottom,\n      refAreaLeft,\n      refAreaRight,\n      data,\n    } = this.state;\n    return (\n      <div>\n        {!data || !data.length ? (\n          <div>No data found at {ENDPOINT}...</div>\n        ) : (\n          <div style={{ textAlign: \"center\" }}>\n            <button className=\"btn update\" onClick={this.zoomOut.bind(this)}>\n              Zoom Out\n            </button>\n            <LineChart\n              data={data}\n              margin={{\n                top: 20,\n                right: 50,\n                left: 50,\n                bottom: 20,\n              }}\n              width={1200}\n              height={400}\n              onMouseDown={(e) =>\n                e && this.setState({ refAreaLeft: e.activeLabel })\n              }\n              onMouseMove={(e) =>\n                refAreaLeft &&\n                e &&\n                this.setState({ refAreaRight: e.activeLabel })\n              }\n              onMouseUp={this.zoom.bind(this)}\n            >\n              <CartesianGrid strokeDasharray=\"1 1\" />\n              <XAxis\n                allowDataOverflow={true}\n                dataKey=\"frequency\"\n                type=\"number\"\n                ticks={this.getXAxisTicks()}\n                domain={[left, right]}\n              />\n              <YAxis\n                domain={[bottom, top]}\n                allowDataOverflow={true}\n                dataKey=\"power\"\n              />\n              {this.getReferencesLines()}\n              <Tooltip />\n              <Legend />\n              {this.getChartLines()}\n              {/* {this.getChartZones()} */}\n              <Tooltip />\n              {refAreaLeft && refAreaRight ? (\n                <ReferenceArea\n                  //   yAxisId=\"1\"\n                  x1={refAreaLeft}\n                  x2={refAreaRight}\n                  strokeOpacity={0.3}\n                  //   key=\"selection\"\n                />\n              ) : null}\n            </LineChart>\n            {/* <div className=\"input-field\">\n              <p>\n                {moment\n                  .unix(this.props.waveform.streamReadAt)\n                  .format(\"MM/DD/YY HH:mm:ss\") || \"\"}\n              </p>\n            </div> */}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/panels/SnapshotWaveformPanel.js",["142"],"import React from \"react\";\nimport moment from \"moment\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ReferenceLine,\n} from \"recharts\";\n\nconst CustomizedLabel = (props) => {\n  const { x, y, stroke, value } = props;\n  return (\n    <text x={x} y={y} dy={-4} fill={stroke} fontSize={10} textAnchor={\"middle\"}>\n      {value}\n    </text>\n  );\n};\n\n// replace the chart with this zoomable one from recharts\n// https://codesandbox.io/s/l4pq6x00xq?file=/src/Hello.js\n\nexport default function SnapshotWaveformPanel(props) {\n  const { waveform, frequencyRanges } = props;\n\n  const getChartLines = () => {\n    return (\n      <Line\n        type=\"monotone\"\n        name=\"power\"\n        dot={false}\n        dataKey=\"power\"\n        key=\"power\"\n        label={<CustomizedLabel />}\n      />\n    );\n  };\n\n  const getReferencesLines = () => {\n    return frequencyRanges.map((r) => {\n      return (\n        <ReferenceLine\n          x={r[1]}\n          key={r[2]}\n          label={{\n            value: r[2],\n            angle: -90,\n            position: \"insideLeft\",\n            textAnchor: \"middle\",\n          }}\n          stroke=\"red\"\n          strokeDasharray=\"3 3\"\n        />\n      );\n    });\n  };\n\n  const getXAxisTicks = () => {\n    const ticks = frequencyRanges.reduce(\n      (acc, curr) => {\n        acc.push(curr[0]);\n        acc.push(curr[1]);\n        return acc;\n      },\n      [0, 20000]\n    );\n    return ticks;\n  };\n\n  const getYAxisTicks = () => {\n    return [0];\n  };\n\n  const renderTable = (data) => {\n    return waveform ? (\n      <LineChart\n        width={1000}\n        height={350}\n        data={data}\n        style={{ textAlign: \"center\" }}\n        margin={{\n          top: 0,\n          right: 100,\n          left: 100,\n          bottom: 0,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"1 1\" />\n        <XAxis dataKey=\"frequency\" ticks={getXAxisTicks()} />\n        <YAxis ticks={getYAxisTicks()} />\n        {getReferencesLines()}\n        <Tooltip />\n        <Legend />\n        {getChartLines()}\n      </LineChart>\n    ) : (\n      <div>No snapshot set yet.</div>\n    );\n  };\n\n  return <div>{renderTable(waveform)}</div>;\n}\n","/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/panels/WaveformStatisticsPanel.js",["143","144"],"import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport {} from \"recharts\";\n\nexport default function WaveformStatisticsPanel(props) {\n  const { waveform = {}, frequencyRanges } = props;\n  const { streamReadAt } = waveform;\n  const now = moment().format('x');\n\n  return (\n    <div>\n      <p>{`current delay (ms)\\t${now - streamReadAt}`}</p>\n    </div>\n  );\n}\n","/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/components/StaticTable/index.js",["145","146"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nexport default function StaticTable(props) {\n  const classes = useStyles();\n  const { stats = {} } = props;\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"static table\">\n        <TableHead>\n          <TableRow>\n            {stats[0].map((col, j) =>\n              j == 0 ? (\n                <TableCell component=\"th\" scope=\"row\">\n                  {col}\n                </TableCell>\n              ) : (\n                <TableCell align=\"right\">{col}</TableCell>\n              )\n            )}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {stats.map((row, i) => (\n            <TableRow key={i}>\n              {row.map((col, j) =>\n                j == 0 ? (\n                  <TableCell component=\"th\" scope=\"row\">\n                    {col}\n                  </TableCell>\n                ) : (\n                  <TableCell align=\"right\">{col}</TableCell>\n                )\n              )}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n",["147","148"],"/Users/tblake/Documents/lifx_audio_visualizer/dashboard/src/panels/HomePagePanel.js",["149","150","151"],"import PowerFrequencyPanel from \"./PowerFrequencyPanel\";\nimport SnapshotWaveformPanel from \"./SnapshotWaveformPanel\";\nimport WaveformStatisticsPanel from \"./WaveformStatisticsPanel\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useState } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: 70,\n  },\n}));\n\nconst __frequencyRanges = [\n  [16, 60, 'sub-bass', 'sb', '#F94144'],\n  [60, 250, 'bass', 'b', '#F3722C'],\n  [250, 500, 'low-mid', 'lm', '#F8961E'],\n  [500, 2000, 'mid', 'm', '#F9C74F'],\n  [2000, 4000, 'high-mid', 'hm', '#90BE6D'],\n  [4000, 6000, 'low-high', 'lh', '#43AA8B'],\n  [6000, 20000, 'high', 'h', '#577590'],\n];\n\nexport default function HomePagePanel() {\n  const classes = useStyles();\n  const [waveform, setWaveform] = useState({});\n  const [frequencyRanges, setFrequencyRanges] = useState(__frequencyRanges);\n\n  return (\n    <Grid container spacing={2} className={classes.root}>\n      <Grid container xs={12}>\n        {/* <WaveformStatisticsPanel\n          waveform={waveform}\n          frequencyRanges={frequencyRanges}\n        /> */}\n      </Grid>\n      <Grid container xs={12}>\n        <Grid container item xs={12} lg={6}>\n          <PowerFrequencyPanel\n            waveform={waveform}\n            setWaveform={setWaveform}\n            frequencyRanges={frequencyRanges}\n          />\n        </Grid>\n        {/* <Grid container item xs={12} lg={6}>\n          <SnapshotWaveformPanel\n            waveform={waveform}\n            frequencyRanges={frequencyRanges}\n          />\n        </Grid> */}\n      </Grid>\n    </Grid>\n  );\n}\n",{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":3,"column":36,"nodeType":"158","messageId":"159","endLine":3,"endColumn":45},{"ruleId":"156","severity":1,"message":"160","line":34,"column":27,"nodeType":"158","messageId":"159","endLine":34,"endColumn":45},{"ruleId":"156","severity":1,"message":"161","line":20,"column":8,"nodeType":"158","messageId":"159","endLine":20,"endColumn":24},{"ruleId":"156","severity":1,"message":"162","line":21,"column":8,"nodeType":"158","messageId":"159","endLine":21,"endColumn":14},{"ruleId":"156","severity":1,"message":"163","line":222,"column":12,"nodeType":"158","messageId":"159","endLine":222,"endColumn":19},{"ruleId":"156","severity":1,"message":"164","line":223,"column":26,"nodeType":"158","messageId":"159","endLine":223,"endColumn":41},{"ruleId":"156","severity":1,"message":"165","line":308,"column":11,"nodeType":"158","messageId":"159","endLine":308,"endColumn":28},{"ruleId":"166","severity":1,"message":"167","line":345,"column":90,"nodeType":"168","messageId":"169","endLine":345,"endColumn":92},{"ruleId":"156","severity":1,"message":"170","line":11,"column":19,"nodeType":"158","messageId":"159","endLine":11,"endColumn":29},{"ruleId":"156","severity":1,"message":"171","line":3,"column":8,"nodeType":"158","messageId":"159","endLine":3,"endColumn":12},{"ruleId":"156","severity":1,"message":"171","line":3,"column":8,"nodeType":"158","messageId":"159","endLine":3,"endColumn":12},{"ruleId":"156","severity":1,"message":"172","line":13,"column":8,"nodeType":"158","messageId":"159","endLine":13,"endColumn":15},{"ruleId":"156","severity":1,"message":"173","line":16,"column":8,"nodeType":"158","messageId":"159","endLine":16,"endColumn":24},{"ruleId":"156","severity":1,"message":"174","line":57,"column":9,"nodeType":"158","messageId":"159","endLine":57,"endColumn":17},{"ruleId":"156","severity":1,"message":"171","line":2,"column":8,"nodeType":"158","messageId":"159","endLine":2,"endColumn":12},{"ruleId":"156","severity":1,"message":"175","line":5,"column":8,"nodeType":"158","messageId":"159","endLine":5,"endColumn":18},{"ruleId":"156","severity":1,"message":"176","line":8,"column":8,"nodeType":"158","messageId":"159","endLine":8,"endColumn":20},{"ruleId":"156","severity":1,"message":"177","line":10,"column":8,"nodeType":"158","messageId":"159","endLine":10,"endColumn":16},{"ruleId":"156","severity":1,"message":"178","line":66,"column":11,"nodeType":"158","messageId":"159","endLine":66,"endColumn":31},{"ruleId":"152","replacedBy":"179"},{"ruleId":"154","replacedBy":"180"},{"ruleId":"156","severity":1,"message":"181","line":28,"column":27,"nodeType":"158","messageId":"159","endLine":28,"endColumn":45},{"ruleId":"182","severity":1,"message":"183","line":115,"column":13,"nodeType":"184","messageId":"185","endLine":115,"endColumn":15},{"ruleId":"182","severity":1,"message":"183","line":116,"column":13,"nodeType":"184","messageId":"185","endLine":116,"endColumn":15},{"ruleId":"152","replacedBy":"186"},{"ruleId":"154","replacedBy":"187"},{"ruleId":"156","severity":1,"message":"188","line":2,"column":8,"nodeType":"158","messageId":"159","endLine":2,"endColumn":14},{"ruleId":"156","severity":1,"message":"188","line":2,"column":8,"nodeType":"158","messageId":"159","endLine":2,"endColumn":14},{"ruleId":"156","severity":1,"message":"188","line":2,"column":8,"nodeType":"158","messageId":"159","endLine":2,"endColumn":14},{"ruleId":"156","severity":1,"message":"189","line":1,"column":17,"nodeType":"158","messageId":"159","endLine":1,"endColumn":25},{"ruleId":"156","severity":1,"message":"190","line":6,"column":26,"nodeType":"158","messageId":"159","endLine":6,"endColumn":41},{"ruleId":"166","severity":1,"message":"167","line":27,"column":17,"nodeType":"168","messageId":"169","endLine":27,"endColumn":19},{"ruleId":"166","severity":1,"message":"167","line":41,"column":19,"nodeType":"168","messageId":"169","endLine":41,"endColumn":21},{"ruleId":"152","replacedBy":"191"},{"ruleId":"154","replacedBy":"192"},{"ruleId":"156","severity":1,"message":"193","line":2,"column":8,"nodeType":"158","messageId":"159","endLine":2,"endColumn":29},{"ruleId":"156","severity":1,"message":"194","line":3,"column":8,"nodeType":"158","messageId":"159","endLine":3,"endColumn":31},{"ruleId":"156","severity":1,"message":"181","line":28,"column":27,"nodeType":"158","messageId":"159","endLine":28,"endColumn":45},"no-native-reassign",["195"],"no-negated-in-lhs",["196"],"no-unused-vars","'InputBase' is defined but never used.","Identifier","unusedVar","'setFilteredTickers' is assigned a value but never used.","'FormControlLabel' is defined but never used.","'Switch' is defined but never used.","'columns' is assigned a value but never used.","'setSubscription' is assigned a value but never used.","'handleChangeDense' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setTickers' is assigned a value but never used.","'clsx' is defined but never used.","'Divider' is defined but never used.","'RangedDatePicker' is defined but never used.","'onSearch' is assigned a value but never used.","'InputLabel' is defined but never used.","'ListItemText' is defined but never used.","'Checkbox' is defined but never used.","'handleChangeMultiple' is assigned a value but never used.",["195"],["196"],"'setFrequencyRanges' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator",["195"],["196"],"'moment' is defined but never used.","'useState' is defined but never used.","'frequencyRanges' is assigned a value but never used.",["195"],["196"],"'SnapshotWaveformPanel' is defined but never used.","'WaveformStatisticsPanel' is defined but never used.","no-global-assign","no-unsafe-negation"]